SET SESSION sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY',''));
USE sakila;
-- 1List the number of films per category.
SELECT c.name,  COUNT(f.film_id) AS film_count
FROM sakila.category c
JOIN sakila.film_category f 
USING (category_id)
GROUP BY c.category_id, c.name
ORDER BY film_count DESC;
-- 2Retrieve the store ID, city, and country for each store.
SELECT s.store_id, ci.city, co.country
FROM sakila.store s
JOIN sakila.address a
USING(address_id)
JOIN sakila.city ci
USING(city_id)
JOIN sakila.country Co
USING(country_id)
GROUP BY s.store_id;

-- 3Calculate the total revenue generated by each store in dollars.
SELECT SUM(p.amount) AS 'total_revenue', c.store_id
FROM sakila.payment p
JOIN sakila.customer c
USING(customer_id)
GROUP BY c.store_id;
-- Next solution is the one my group came out with , mine ( the first one gave me different results, but the sum of revenue amounts its the same).Is mine (the first one)wrong? 
SELECT st.store_id as store_id, SUM(p.amount) as revenue
FROM sakila.payment p 
JOIN sakila.staff s
ON p.staff_id=s.staff_id
JOIN sakila.store st
ON s.store_id=st.store_id
GROUP BY store_id;

-- 4-Determine the average running time of films for each category.
SELECT AVG(f.length) , c.name
FROM sakila.film f
JOIN sakila.film_category fc
USING(film_id)
JOIN sakila.category c
USING(category_id)
GROUP BY c.name;

-- 5Identify the film categories with the longest average running time.
SELECT AVG(f.length) , c.name
FROM sakila.film f
JOIN sakila.film_category fc
USING(film_id)
JOIN sakila.category c
USING(category_id)
GROUP BY c.name
ORDER BY AVG(f.length) DESC;

-- 6 Display the top 10 most frequently rented movies in descending order.

SELECT f.title, i.film_id, COUNT(r.rental_id) AS rental_count
FROM sakila.rental r
JOIN sakila.inventory i
USING (inventory_id)
JOIN sakila.film f
USING (film_id)
GROUP BY i.film_id, f.title
ORDER BY rental_count DESC
LIMIT 10;
-- 7 Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT f.title, COUNT(i.inventory_id) AS 'available_copies', s.store_id
FROM sakila.film f
JOIN sakila.inventory i
USING(film_id)
JOIN sakila.store s
USING(store_id)
WHERE f.title = 'Academy Dinosaur' AND s.store_id = '1';

-- 8 List of ALL film titles and if they are available in inventory.
SELECT DISTINCT f.title, i.inventory_id, s.store_id
FROM sakila.film f
LEFT JOIN sakila.inventory i
USING(film_id)
LEFT JOIN sakila.store s
USING(store_id)
GROUP BY f.title;

-- 


-- 
-- 
-- 
-- 
-- 
-- 
-- 